// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WepApiTraining.Models;

public partial class STCDataContext : DbContext
{
    private const string CONNECTION_STRING = "Data Source=DESKTOP-P8RF56O;Initial Catalog=STCData;Integrated Security=True;Trust Server Certificate=True";

    public STCDataContext()
    {
    }
    public STCDataContext(DbContextOptions<STCDataContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Feuil1> Feuil1 { get; set; }

    public virtual DbSet<TTempsPassé> TTempsPassé { get; set; }

    public virtual DbSet<TblTcClient> TblTcClient { get; set; }

    public virtual DbSet<TblTcConstatVerif> TblTcConstatVerif { get; set; }

    public virtual DbSet<TblTcContact> TblTcContact { get; set; }

    public virtual DbSet<TblTcContrat> TblTcContrat { get; set; }

    public virtual DbSet<TblTcDefautProduction> TblTcDefautProduction { get; set; }

    public virtual DbSet<TblTcEtalon> TblTcEtalon { get; set; }

    public virtual DbSet<TblTcEtatFicheIntervention> TblTcEtatFicheIntervention { get; set; }

    public virtual DbSet<TblTcFicheIntervention> TblTcFicheIntervention { get; set; }

    public virtual DbSet<TblTcIntervenant> TblTcIntervenant { get; set; }

    public virtual DbSet<TblTcInterventionClient> TblTcInterventionClient { get; set; }

    public virtual DbSet<TblTcLogiciel> TblTcLogiciel { get; set; }

    public virtual DbSet<TblTcMachine> TblTcMachine { get; set; }

    public virtual DbSet<TblTcPeriodeCalibration> TblTcPeriodeCalibration { get; set; }

    public virtual DbSet<TblTcProduit> TblTcProduit { get; set; }

    public virtual DbSet<TblTcSsIntervertion> TblTcSsIntervertion { get; set; }

    public virtual DbSet<TblTcTitre> TblTcTitre { get; set; }

    public virtual DbSet<TblTcTypeAction> TblTcTypeAction { get; set; }

    public virtual DbSet<TblTcTypeContrat> TblTcTypeContrat { get; set; }

    public virtual DbSet<TblTcTypeFicheIntervention> TblTcTypeFicheIntervention { get; set; }

    public virtual DbSet<TblTcTypeIntervention> TblTcTypeIntervention { get; set; }

    public virtual DbSet<TblTcTypeLogiciel> TblTcTypeLogiciel { get; set; }

    public virtual DbSet<TblTcTypeProduit> TblTcTypeProduit { get; set; }

    public virtual DbSet<UsysApplicationLog> UsysApplicationLog { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(CONNECTION_STRING);
        base.OnConfiguring(optionsBuilder);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Feuil1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Feuil1$ID");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Champ1).HasMaxLength(255);
        });

        modelBuilder.Entity<TTempsPassé>(entity =>
        {
            entity.HasKey(e => e.IdtempsPasse).HasName("T_TempsPassé$PrimaryKey");

            entity.ToTable("T_TempsPassé");

            entity.HasIndex(e => e.LnkIdficheIntervention, "T_TempsPassé$Numero intervention");

            entity.HasIndex(e => e.LnkIdintervenant, "T_TempsPassé$lnkIDIntervenant");

            entity.HasIndex(e => e.NTpasseMinute, "T_TempsPassé$nTPasseMinute");

            entity.Property(e => e.IdtempsPasse).HasColumnName("IDTempsPasse");
            entity.Property(e => e.DateTpasse)
                .HasPrecision(0)
                .HasColumnName("dateTPasse");
            entity.Property(e => e.LnkIdficheIntervention)
                .HasDefaultValueSql("((0))")
                .HasColumnName("lnkIDFicheIntervention");
            entity.Property(e => e.LnkIdintervenant)
                .HasDefaultValueSql("((0))")
                .HasColumnName("lnkIDIntervenant");
            entity.Property(e => e.NTpasseMinute).HasColumnName("nTPasseMinute");
            entity.Property(e => e.StrTpassePersonne)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("strTPassePersonne");

            entity.HasOne(d => d.LnkIdficheInterventionNavigation).WithMany(p => p.TTempsPassé)
                .HasForeignKey(d => d.LnkIdficheIntervention)
                .HasConstraintName("T_TempsPassé$Tbl_TC_FicheInterventionT_TempsPassé");
        });

        modelBuilder.Entity<TblTcClient>(entity =>
        {
            entity.HasKey(e => e.Idclient).HasName("Tbl_TC_Client$PrimaryKey");

            entity.ToTable("Tbl_TC_Client");

            entity.HasIndex(e => e.StrClRevendeur, "Tbl_TC_Client$lnkIDRevendeur");

            entity.Property(e => e.Idclient)
                .HasComment("ID du client")
                .HasColumnName("IDClient");
            entity.Property(e => e.BClDesactive)
                .HasDefaultValueSql("((0))")
                .HasComment("Client mort")
                .HasColumnName("bClDesactive");
            entity.Property(e => e.BClTransfertOk)
                .HasDefaultValueSql("((0))")
                .HasComment("Client transféré dans PMI")
                .HasColumnName("bClTransfertOK");
            entity.Property(e => e.DateClCreationFiche)
                .HasPrecision(0)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("dateClCreationFiche");
            entity.Property(e => e.DateClDernierContact)
                .HasPrecision(0)
                .HasComment("Date du dernier contact commercial")
                .HasColumnName("dateClDernierContact");
            entity.Property(e => e.DateClMajFiche)
                .HasPrecision(0)
                .HasComment("Dernière mise à jour de la fiche client")
                .HasColumnName("dateClMajFiche");
            entity.Property(e => e.DateClPremierContact)
                .HasPrecision(0)
                .HasComment("Date du 1er contact commercial")
                .HasColumnName("dateClPremierContact");
            entity.Property(e => e.LhtClWeb)
                .HasComment("Site web de la société")
                .HasColumnName("lhtClWeb");
            entity.Property(e => e.LnkIdrevendeur)
                .HasDefaultValueSql("((0))")
                .HasComment("ID (lien) du revendeur")
                .HasColumnName("lnkIDRevendeur");
            entity.Property(e => e.NClKm)
                .HasDefaultValueSql("((0))")
                .HasComment("Distance en km de louviers à la société")
                .HasColumnName("nClKm");
            entity.Property(e => e.NClPriorite)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nClPriorite");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrClActivite)
                .HasMaxLength(100)
                .HasComment("Secteur d'activité de la société")
                .HasColumnName("strClActivite");
            entity.Property(e => e.StrClCodeGescom)
                .HasMaxLength(255)
                .HasComment("Code compta CIEL")
                .HasColumnName("strClCodeGescom");
            entity.Property(e => e.StrClCodePmi)
                .HasDefaultValueSql("((0))")
                .HasColumnName("strClCodePMI");
            entity.Property(e => e.StrClFax)
                .HasMaxLength(255)
                .HasComment("Fax. de la société")
                .HasColumnName("strClFax");
            entity.Property(e => e.StrClInfo)
                .HasComment("Remarques / infos sur la société")
                .HasColumnName("strClInfo");
            entity.Property(e => e.StrClLivAdr1)
                .HasMaxLength(255)
                .HasComment("Adresse 1")
                .HasColumnName("strClLivAdr1");
            entity.Property(e => e.StrClLivAdr2)
                .HasMaxLength(255)
                .HasComment("Adresse 2")
                .HasColumnName("strClLivAdr2");
            entity.Property(e => e.StrClLivAdr3)
                .HasMaxLength(255)
                .HasComment("Adresse 3")
                .HasColumnName("strClLivAdr3");
            entity.Property(e => e.StrClLivCodePostal)
                .HasMaxLength(255)
                .HasComment("Adresse / CP")
                .HasColumnName("strClLivCodePostal");
            entity.Property(e => e.StrClLivPays)
                .HasMaxLength(255)
                .HasComment("Adresse / Pays")
                .HasColumnName("strClLivPays");
            entity.Property(e => e.StrClLivSociete)
                .HasMaxLength(255)
                .HasComment("Nom de la société")
                .HasColumnName("strClLivSociete");
            entity.Property(e => e.StrClLivVille)
                .HasMaxLength(255)
                .HasComment("Adresse / Ville")
                .HasColumnName("strClLivVille");
            entity.Property(e => e.StrClMetier)
                .HasMaxLength(255)
                .HasComment("Type métier de la société")
                .HasColumnName("strClMetier");
            entity.Property(e => e.StrClOrigineContact)
                .HasMaxLength(100)
                .HasComment("Origine du contact")
                .HasColumnName("strClOrigineContact");
            entity.Property(e => e.StrClPriorite)
                .HasMaxLength(255)
                .HasColumnName("strClPriorite");
            entity.Property(e => e.StrClProduits)
                .HasMaxLength(100)
                .HasComment("Types de produits")
                .HasColumnName("strClProduits");
            entity.Property(e => e.StrClRevendeur)
                .HasMaxLength(255)
                .HasComment("Nom du revendeur")
                .HasColumnName("strClRevendeur");
            entity.Property(e => e.StrClStatutClient)
                .HasMaxLength(50)
                .HasColumnName("strClStatutClient");
            entity.Property(e => e.StrClStatutCommercial)
                .HasMaxLength(50)
                .HasColumnName("strClStatutCommercial");
            entity.Property(e => e.StrClTel)
                .HasMaxLength(255)
                .HasComment("Tel. de la société")
                .HasColumnName("strClTel");
            entity.Property(e => e.StrClTransfertPmi)
                .HasMaxLength(255)
                .HasComment("Client transférable vers PMI")
                .HasColumnName("strClTransfertPMI");
            entity.Property(e => e.StrEmail).HasComment("Email de la société");
            entity.Property(e => e.StrNomCourt)
                .HasMaxLength(10)
                .HasComment("Nom court de la société")
                .HasColumnName("strNomCourt");
        });

        modelBuilder.Entity<TblTcConstatVerif>(entity =>
        {
            entity.HasKey(e => e.IdconstatVerification).HasName("Tbl_TC_ConstatVerif$PrimaryKey");

            entity.ToTable("Tbl_TC_ConstatVerif");

            entity.HasIndex(e => e.DateCvintervention, "Tbl_TC_ConstatVerif$DATE");

            entity.HasIndex(e => e.StrCvnumero, "Tbl_TC_ConstatVerif$NUMERO").IsUnique();

            entity.Property(e => e.IdconstatVerification)
                .HasComment("ID du constat")
                .HasColumnName("IDConstatVerification");
            entity.Property(e => e.DateCvcertificat)
                .HasPrecision(0)
                .HasComment("Date du constat")
                .HasColumnName("dateCVCertificat");
            entity.Property(e => e.DateCvintervention)
                .HasPrecision(0)
                .HasComment("Date de l'intervention / calibration")
                .HasColumnName("dateCVIntervention");
            entity.Property(e => e.LnkIdcontrat)
                .HasComment("ID du contrat de maintenance associé (optionnel)")
                .HasColumnName("lnkIDContrat");
            entity.Property(e => e.LnkIdetalonEtalonZ)
                .HasComment("ID de l'étalon de calibration du Z")
                .HasColumnName("lnkIDEtalon_EtalonZ");
            entity.Property(e => e.LnkIdetalonGrille)
                .HasComment("ID de l'étalon de calibration XY")
                .HasColumnName("lnkIDEtalon_Grille");
            entity.Property(e => e.LnkIdmachine)
                .HasDefaultValueSql("((0))")
                .HasComment("ID de la machine concerné (obligatoire)")
                .HasColumnName("lnkIDMachine");
            entity.Property(e => e.MemoCvremarques)
                .HasComment("Mémo / remarques diverses")
                .HasColumnName("memoCVRemarques");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrCvintervenant)
                .HasMaxLength(255)
                .HasComment("Intervenant / opérateur")
                .HasColumnName("strCVIntervenant");
            entity.Property(e => e.StrCvnumero)
                .HasMaxLength(10)
                .HasComment("N° du constat de vérification (nom unique obligatoire)")
                .HasColumnName("strCVNumero");
            entity.Property(e => e.StrCvredacteur)
                .HasMaxLength(255)
                .HasComment("Rédacteur du constat")
                .HasColumnName("strCVRedacteur");
            entity.Property(e => e.StrCvtypeCorrection)
                .HasMaxLength(15)
                .HasComment("Type de correction")
                .HasColumnName("strCVTypeCorrection");
        });

        modelBuilder.Entity<TblTcContact>(entity =>
        {
            entity.HasKey(e => e.Idpersonne).HasName("Tbl_TC_Contact$PrimaryKey");

            entity.ToTable("Tbl_TC_Contact");

            entity.HasIndex(e => e.Idpersonne, "Tbl_TC_Contact$Numero");

            entity.HasIndex(e => e.LnkIdclient, "Tbl_TC_Contact$lnkIDClient2");

            entity.Property(e => e.Idpersonne).HasColumnName("IDPersonne");
            entity.Property(e => e.BPersInactif)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bPersInactif");
            entity.Property(e => e.BPersPrincipal)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bPersPrincipal");
            entity.Property(e => e.BPersTranfertPmi)
                .HasDefaultValueSql("((0))")
                .HasComment("Contact client transférable vers PMI")
                .HasColumnName("bPersTranfertPMI");
            entity.Property(e => e.BpersFait)
                .HasDefaultValueSql("((0))")
                .HasComment("Contact vérifié par le SAV")
                .HasColumnName("BPersFait");
            entity.Property(e => e.LnkIdclient).HasColumnName("lnkIDClient");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrPersEmail).HasColumnName("strPersEmail");
            entity.Property(e => e.StrPersFax)
                .HasMaxLength(50)
                .HasColumnName("strPersFax");
            entity.Property(e => e.StrPersFonction)
                .HasMaxLength(50)
                .HasColumnName("strPersFonction");
            entity.Property(e => e.StrPersNom)
                .HasMaxLength(50)
                .HasColumnName("strPersNom");
            entity.Property(e => e.StrPersPrenom)
                .HasMaxLength(50)
                .HasColumnName("strPersPrenom");
            entity.Property(e => e.StrPersTel)
                .HasMaxLength(50)
                .HasColumnName("strPersTel");
            entity.Property(e => e.StrPersTitre)
                .HasMaxLength(5)
                .HasColumnName("strPersTitre");

            entity.HasOne(d => d.LnkIdclientNavigation).WithMany(p => p.TblTcContact)
                .HasForeignKey(d => d.LnkIdclient)
                .HasConstraintName("Tbl_TC_Contact$Tbl_TC_ClientTbl_TC_Contact");
        });

        modelBuilder.Entity<TblTcContrat>(entity =>
        {
            entity.HasKey(e => e.Idcontrat).HasName("Tbl_TC_Contrat$PrimaryKey");

            entity.ToTable("Tbl_TC_Contrat");

            entity.HasIndex(e => e.LnkIdclient, "Tbl_TC_Contrat$lnkIDClient2");

            entity.HasIndex(e => e.LnkIdmachine, "Tbl_TC_Contrat$lnkIDMachine");

            entity.HasIndex(e => e.LnkIdtypeContrat, "Tbl_TC_Contrat$lnkIDTypeContrat");

            entity.HasIndex(e => e.StrContratNumero, "Tbl_TC_Contrat$strContratNumero").IsUnique();

            entity.Property(e => e.Idcontrat)
                .HasComment("Index")
                .HasColumnName("IDContrat");
            entity.Property(e => e.BContratActif)
                .HasDefaultValueSql("((0))")
                .HasComment("Contrat actif/inactif")
                .HasColumnName("bContratActif");
            entity.Property(e => e.DateContratDebut)
                .HasPrecision(0)
                .HasComment("Date de debut de contrat")
                .HasColumnName("dateContratDebut");
            entity.Property(e => e.DateContratFin)
                .HasPrecision(0)
                .HasComment("Date d'échéance du contrat")
                .HasColumnName("dateContratFin");
            entity.Property(e => e.LnkIdclient)
                .HasComment("Index code client")
                .HasColumnName("lnkIDClient");
            entity.Property(e => e.LnkIdmachine)
                .HasComment("Index du numéro de machine")
                .HasColumnName("lnkIDMachine");
            entity.Property(e => e.LnkIdtypeContrat)
                .HasComment("Index du type contrat")
                .HasColumnName("lnkIDTypeContrat");
            entity.Property(e => e.MemoContratComment)
                .HasComment("Commentaire")
                .HasColumnName("memoContratComment");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrContratCoutDep)
                .HasMaxLength(255)
                .HasComment("Prix du déplacement en Euro (signe sur contrat)")
                .HasColumnName("strContratCoutDep");
            entity.Property(e => e.StrContratDistanceKmsAr)
                .HasMaxLength(255)
                .HasComment("Distance en kilomètres (Aller retour) Site Delta / Site Client")
                .HasColumnName("strContratDistanceKmsAR");
            entity.Property(e => e.StrContratIndex)
                .HasMaxLength(50)
                .HasComment("Index d'année (1 pour la 1ere année, 2 pour la 2nde, etc.)")
                .HasColumnName("strContratIndex");
            entity.Property(e => e.StrContratNbreUniteHotLine)
                .HasMaxLength(255)
                .HasComment("Unite de 15mn (nomalement 15 unite par contrat)")
                .HasColumnName("strContratNbreUniteHotLine");
            entity.Property(e => e.StrContratNumCommande)
                .HasMaxLength(255)
                .HasComment("N° de la commande associé au contrat")
                .HasColumnName("strContratNumCommande");
            entity.Property(e => e.StrContratNumero)
                .HasMaxLength(255)
                .HasComment("Numero du contrat")
                .HasColumnName("strContratNumero");
            entity.Property(e => e.StrContratPrix)
                .HasMaxLength(255)
                .HasComment("Prix du contrat en Euro (signe sur contrat)")
                .HasColumnName("strContratPrix");
            entity.Property(e => e.StrContrattempMinuteCredit)
                .HasMaxLength(255)
                .HasComment("Nombre de minutes créditée par le contrat")
                .HasColumnName("strContrattempMinuteCredit");
            entity.Property(e => e.StrContrattempMinuteDebit)
                .HasMaxLength(255)
                .HasComment("Nombre de minutes débitée")
                .HasColumnName("strContrattempMinuteDebit");
            entity.Property(e => e.StrContrattempMinuteUnite)
                .HasMaxLength(255)
                .HasComment("Nombre de minutes par unité")
                .HasColumnName("strContrattempMinuteUnite");
        });

        modelBuilder.Entity<TblTcDefautProduction>(entity =>
        {
            entity.HasKey(e => e.IddefautProduction).HasName("Tbl_TC_DefautProduction$PrimaryKey");

            entity.ToTable("Tbl_TC_DefautProduction");

            entity.Property(e => e.IddefautProduction).HasColumnName("IDDefautProduction");
            entity.Property(e => e.LnkIdmachine).HasColumnName("lnkIDMachine");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.Type).HasMaxLength(255);

            entity.HasOne(d => d.LnkIdmachineNavigation).WithMany(p => p.TblTcDefautProduction)
                .HasForeignKey(d => d.LnkIdmachine)
                .HasConstraintName("Tbl_TC_DefautProduction$Tbl_TC_MachineTbl_TC_DefautProduction");
        });

        modelBuilder.Entity<TblTcEtalon>(entity =>
        {
            entity.HasKey(e => e.Idetalon).HasName("Tbl_TC_Etalon$PrimaryKey");

            entity.ToTable("Tbl_TC_Etalon");

            entity.HasIndex(e => e.BEtalonActif, "Tbl_TC_Etalon$bEtalonActif");

            entity.Property(e => e.Idetalon)
                .HasComment("ID de l'étalon")
                .HasColumnName("IDEtalon");
            entity.Property(e => e.BEtalonActif)
                .HasComment("Etalon actif")
                .HasColumnName("bEtalonActif");
            entity.Property(e => e.DateEtalonCe)
                .HasPrecision(0)
                .HasComment("Date du certificat")
                .HasColumnName("dateEtalonCE");
            entity.Property(e => e.IEtalonOrdre)
                .HasDefaultValueSql("((0))")
                .HasComment("N° d'ordre")
                .HasColumnName("iEtalonOrdre");
            entity.Property(e => e.MemoEtalonCommentaire)
                .HasComment("Commentaire")
                .HasColumnName("memoEtalonCommentaire");
            entity.Property(e => e.NPeriodiciteMois)
                .HasComment("Periodicité d'etalonnage en mois")
                .HasColumnName("nPeriodiciteMois");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrEtalonNom)
                .HasMaxLength(20)
                .HasComment("Nom de l'etalon (Product ID)")
                .HasColumnName("strEtalonNom");
            entity.Property(e => e.StrEtalonSn)
                .HasMaxLength(50)
                .HasComment("N° de série  de l'étalon (Product SN)")
                .HasColumnName("strEtalonSN");
            entity.Property(e => e.StrEtalonType)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("Type de l'étalon (Informations)")
                .HasColumnName("strEtalonType");
            entity.Property(e => e.StrNumeroCe)
                .HasMaxLength(255)
                .HasComment("Numéro certificat d'etalonnage")
                .HasColumnName("strNumeroCE");
        });

        modelBuilder.Entity<TblTcEtatFicheIntervention>(entity =>
        {
            entity.HasKey(e => e.IdetatFicheIntervention).HasName("Tbl_TC_EtatFicheIntervention$PrimaryKey");

            entity.ToTable("Tbl_TC_EtatFicheIntervention");

            entity.HasIndex(e => e.NEfiordre, "Tbl_TC_EtatFicheIntervention$nEFIOrdre");

            entity.HasIndex(e => e.StrEfidescription, "Tbl_TC_EtatFicheIntervention$strEFIDescription");

            entity.Property(e => e.IdetatFicheIntervention)
                .ValueGeneratedNever()
                .HasColumnName("IDEtatFicheIntervention");
            entity.Property(e => e.NEfiordre)
                .HasDefaultValueSql("((0))")
                .HasColumnName("nEFIOrdre");
            entity.Property(e => e.StrEfiaide)
                .HasMaxLength(100)
                .HasColumnName("strEFIAide");
            entity.Property(e => e.StrEfidescription)
                .HasMaxLength(100)
                .HasColumnName("strEFIDescription");
        });

        modelBuilder.Entity<TblTcFicheIntervention>(entity =>
        {
            entity.HasKey(e => e.IdficheIntervention).HasName("Tbl_TC_FicheIntervention$PrimaryKey");

            entity.ToTable("Tbl_TC_FicheIntervention");

            entity.HasIndex(e => e.LnkIdclient, "Tbl_TC_FicheIntervention$lnkIDClient2");

            entity.HasIndex(e => e.LnkIdetatFicheIntervention, "Tbl_TC_FicheIntervention$lnkIDEtatFicheIntervention");

            entity.HasIndex(e => e.LnkIdintervenantF, "Tbl_TC_FicheIntervention$lnkIDIntervenant_F");

            entity.HasIndex(e => e.LnkIdintervenantO, "Tbl_TC_FicheIntervention$lnkIDIntervenant_O");

            entity.HasIndex(e => e.LnkIdmachine, "Tbl_TC_FicheIntervention$lnkIDMachine");

            entity.HasIndex(e => e.LnkIdpersonne, "Tbl_TC_FicheIntervention$lnkIDPersonne");

            entity.HasIndex(e => e.LnkIdtypeFicheIntervention, "Tbl_TC_FicheIntervention$lnkIDTypeFicheIntervention");

            entity.HasIndex(e => e.MemFititre, "Tbl_TC_FicheIntervention$memFIDescriptionSymptome");

            entity.Property(e => e.IdficheIntervention)
                .HasComment("ID De la fiche d'intervention")
                .HasColumnName("IDFicheIntervention");
            entity.Property(e => e.DateFicreation)
                .HasPrecision(0)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Date de création")
                .HasColumnName("dateFICreation");
            entity.Property(e => e.DateFifermeture)
                .HasPrecision(0)
                .HasComment("Date de fermeure")
                .HasColumnName("dateFIFermeture");
            entity.Property(e => e.DateFiouverture)
                .HasPrecision(0)
                .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))")
                .HasComment("Date d'ouverture")
                .HasColumnName("dateFIOuverture");
            entity.Property(e => e.LnkIdclient)
                .HasDefaultValueSql("((0))")
                .HasComment("ID Client à laquelle est liée la fiche")
                .HasColumnName("lnkIDClient");
            entity.Property(e => e.LnkIdetatFicheIntervention)
                .HasDefaultValueSql("((0))")
                .HasComment("ID Etat de la fiche")
                .HasColumnName("lnkIDEtatFicheIntervention");
            entity.Property(e => e.LnkIdintervenantF)
                .HasDefaultValueSql("((0))")
                .HasComment("ID de l'intervenant d'ouverture")
                .HasColumnName("lnkIDIntervenant_F");
            entity.Property(e => e.LnkIdintervenantO)
                .HasDefaultValueSql("((0))")
                .HasComment("ID de l'intervenant d'ouverture")
                .HasColumnName("lnkIDIntervenant_O");
            entity.Property(e => e.LnkIdmachine)
                .HasDefaultValueSql("((0))")
                .HasComment("ID Machine à laquelle est liée la fiche (optionnel)")
                .HasColumnName("lnkIDMachine");
            entity.Property(e => e.LnkIdpersonne)
                .HasDefaultValueSql("((0))")
                .HasComment("ID Personne (appelant) à laquelle est liée la fiche (optionnel)")
                .HasColumnName("lnkIDPersonne");
            entity.Property(e => e.LnkIdtypeFicheIntervention)
                .HasDefaultValueSql("((0))")
                .HasComment("ID du type d'intervention de la fiche")
                .HasColumnName("lnkIDTypeFicheIntervention");
            entity.Property(e => e.MemFidescription)
                .HasComment("Description du problème / de la demande / etc.")
                .HasColumnName("memFIDescription");
            entity.Property(e => e.MemFititre)
                .HasMaxLength(255)
                .HasComment("Titre de la fiche")
                .HasColumnName("memFITitre");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrFiemailAppelant)
                .HasMaxLength(255)
                .HasComment("Email de l'appelant")
                .HasColumnName("strFIEmailAppelant");
            entity.Property(e => e.StrFitelephoneAppelant)
                .HasMaxLength(50)
                .HasComment("Tel de l'appelant")
                .HasColumnName("strFITelephoneAppelant");

            entity.HasOne(d => d.LnkIdclientNavigation).WithMany(p => p.TblTcFicheIntervention)
                .HasForeignKey(d => d.LnkIdclient)
                .HasConstraintName("Tbl_TC_FicheIntervention$Tbl_TC_ClientTbl_TC_FicheIntervention");

            entity.HasOne(d => d.LnkIdetatFicheInterventionNavigation).WithMany(p => p.TblTcFicheIntervention)
                .HasForeignKey(d => d.LnkIdetatFicheIntervention)
                .HasConstraintName("Tbl_TC_FicheIntervention$Tbl_TC_EtatFicheInterventionTbl_TC_FicheIntervention");

            entity.HasOne(d => d.LnkIdintervenantFNavigation).WithMany(p => p.TblTcFicheInterventionLnkIdintervenantFNavigation)
                .HasForeignKey(d => d.LnkIdintervenantF)
                .HasConstraintName("Tbl_TC_FicheIntervention$Tbl_TC_IntervenantTbl_TC_FicheIntervention");

            entity.HasOne(d => d.LnkIdintervenantONavigation).WithMany(p => p.TblTcFicheInterventionLnkIdintervenantONavigation)
                .HasForeignKey(d => d.LnkIdintervenantO)
                .HasConstraintName("Tbl_TC_FicheIntervention$Tbl_TC_IntervenantTbl_TC_FicheIntervention1");

            entity.HasOne(d => d.LnkIdmachineNavigation).WithMany(p => p.TblTcFicheIntervention)
                .HasForeignKey(d => d.LnkIdmachine)
                .HasConstraintName("Tbl_TC_FicheIntervention$Tbl_TC_MachineTbl_TC_FicheIntervention");

            entity.HasOne(d => d.LnkIdpersonneNavigation).WithMany(p => p.TblTcFicheIntervention)
                .HasForeignKey(d => d.LnkIdpersonne)
                .HasConstraintName("Tbl_TC_FicheIntervention$T_PersonnesTbl_TC_FicheIntervention");

            entity.HasOne(d => d.LnkIdtypeFicheInterventionNavigation).WithMany(p => p.TblTcFicheIntervention)
                .HasForeignKey(d => d.LnkIdtypeFicheIntervention)
                .HasConstraintName("Tbl_TC_FicheIntervention$T_TypeFicheTbl_TC_FicheIntervention");
        });

        modelBuilder.Entity<TblTcIntervenant>(entity =>
        {
            entity.HasKey(e => e.Idintervenant).HasName("Tbl_TC_Intervenant$PrimaryKey");

            entity.ToTable("Tbl_TC_Intervenant");

            entity.HasIndex(e => e.StrIntervenantNomLong, "Tbl_TC_Intervenant$Nom_complet").IsUnique();

            entity.HasIndex(e => e.Idintervenant, "Tbl_TC_Intervenant$NumPersionne").IsUnique();

            entity.HasIndex(e => e.BIntervenantActif, "Tbl_TC_Intervenant$bIntervenantActif");

            entity.HasIndex(e => e.IIntervenantOrder, "Tbl_TC_Intervenant$iOrder");

            entity.Property(e => e.Idintervenant)
                .ValueGeneratedNever()
                .HasColumnName("IDIntervenant");
            entity.Property(e => e.BIntervenantActif)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bIntervenantActif");
            entity.Property(e => e.IIntervenantOrder)
                .HasDefaultValueSql("((0))")
                .HasColumnName("iIntervenantOrder");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrIntervenantNomCourt)
                .HasMaxLength(13)
                .HasColumnName("strIntervenantNomCourt");
            entity.Property(e => e.StrIntervenantNomLong)
                .HasMaxLength(30)
                .HasColumnName("strIntervenantNomLong");
        });

        modelBuilder.Entity<TblTcInterventionClient>(entity =>
        {
            entity.HasKey(e => e.IdinterventionClient).HasName("Tbl_TC_InterventionClient$PrimaryKey");

            entity.ToTable("Tbl_TC_InterventionClient");

            entity.Property(e => e.IdinterventionClient).HasColumnName("IDInterventionClient");
            entity.Property(e => e.CommandeCiel).HasMaxLength(255);
            entity.Property(e => e.DateDebut).HasPrecision(0);
            entity.Property(e => e.DateFin).HasPrecision(0);
            entity.Property(e => e.Garantie).HasDefaultValueSql("((0))");
            entity.Property(e => e.LnkIdclient).HasColumnName("lnkIDClient");
            entity.Property(e => e.LnkIdintervenant).HasColumnName("lnkIDIntervenant");
            entity.Property(e => e.LnkIdmachine).HasColumnName("lnkIDMachine");
            entity.Property(e => e.LnkIdtypeIntervention).HasColumnName("lnkIDTypeIntervention");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");

            entity.HasOne(d => d.LnkIdclientNavigation).WithMany(p => p.TblTcInterventionClient)
                .HasForeignKey(d => d.LnkIdclient)
                .HasConstraintName("Tbl_TC_InterventionClient$Tbl_TC_ClientTbl_TC_InterventionClient");

            entity.HasOne(d => d.LnkIdintervenantNavigation).WithMany(p => p.TblTcInterventionClient)
                .HasForeignKey(d => d.LnkIdintervenant)
                .HasConstraintName("Tbl_TC_InterventionClient$Tbl_TC_IntervenantTbl_TC_InterventionClient");

            entity.HasOne(d => d.LnkIdmachineNavigation).WithMany(p => p.TblTcInterventionClient)
                .HasForeignKey(d => d.LnkIdmachine)
                .HasConstraintName("Tbl_TC_InterventionClient$Tbl_TC_MachineTbl_TC_InterventionClient");

            entity.HasOne(d => d.LnkIdtypeInterventionNavigation).WithMany(p => p.TblTcInterventionClient)
                .HasForeignKey(d => d.LnkIdtypeIntervention)
                .HasConstraintName("Tbl_TC_InterventionClient$Tbl_TC_TypeInterventionTbl_TC_InterventionClient");
        });

        modelBuilder.Entity<TblTcLogiciel>(entity =>
        {
            entity.HasKey(e => e.Idlogiciel).HasName("Tbl_TC_Logiciel$PrimaryKey");

            entity.ToTable("Tbl_TC_Logiciel");

            entity.HasIndex(e => e.LnkIdtypeLogiciel, "Tbl_TC_Logiciel$CodeSoft");

            entity.HasIndex(e => e.Idlogiciel, "Tbl_TC_Logiciel$NUM_RO1");

            entity.HasIndex(e => e.LnkIdmachine, "Tbl_TC_Logiciel$lnkIDMachine");

            entity.Property(e => e.Idlogiciel).HasColumnName("IDLogiciel");
            entity.Property(e => e.BLogActif)
                .HasDefaultValueSql("((1))")
                .HasColumnName("bLogActif");
            entity.Property(e => e.DateLogMaj)
                .HasPrecision(0)
                .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))")
                .HasColumnName("dateLogMAJ");
            entity.Property(e => e.LnkIdmachine)
                .HasDefaultValueSql("((0))")
                .HasColumnName("lnkIDMachine");
            entity.Property(e => e.LnkIdtypeLogiciel)
                .HasDefaultValueSql("((0))")
                .HasColumnName("lnkIDTypeLogiciel");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrLogLangue)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('*')")
                .HasComment("Langue du logiciel")
                .HasColumnName("strLogLangue");
            entity.Property(e => e.StrLogSn)
                .HasMaxLength(55)
                .HasDefaultValueSql("('*')")
                .HasColumnName("strLogSN");
            entity.Property(e => e.StrLogTypeLogicielComplement)
                .IsRequired()
                .HasMaxLength(255)
                .HasDefaultValueSql("('*')")
                .HasColumnName("strLogTypeLogicielComplement");
            entity.Property(e => e.StrLogVersion)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('*')")
                .HasColumnName("strLogVersion");
            entity.Property(e => e.StrLogVersionComplement)
                .IsRequired()
                .HasMaxLength(255)
                .HasDefaultValueSql("('*')")
                .HasColumnName("strLogVersionComplement");

            entity.HasOne(d => d.LnkIdmachineNavigation).WithMany(p => p.TblTcLogiciel)
                .HasForeignKey(d => d.LnkIdmachine)
                .HasConstraintName("Tbl_TC_Logiciel$Tbl_TC_MachineT_LOGICIEL");

            entity.HasOne(d => d.LnkIdtypeLogicielNavigation).WithMany(p => p.TblTcLogiciel)
                .HasForeignKey(d => d.LnkIdtypeLogiciel)
                .HasConstraintName("Tbl_TC_Logiciel$T_TypLogT_LOGICIEL");
        });

        modelBuilder.Entity<TblTcMachine>(entity =>
        {
            entity.HasKey(e => e.Idmachine).HasName("Tbl_TC_Machine$PrimaryKey");

            entity.ToTable("Tbl_TC_Machine");

            entity.HasIndex(e => e.StrMachineSn, "Tbl_TC_Machine$Série  Cle ARGOS").IsUnique();

            entity.HasIndex(e => e.LnkIdclient, "Tbl_TC_Machine$lnkIDClient2");

            entity.Property(e => e.Idmachine)
                .HasComment("ID de la machine")
                .HasColumnName("IDMachine");
            entity.Property(e => e.BMachineDebridageSoft)
                .HasDefaultValueSql("((0))")
                .HasComment("Débridage logiciel")
                .HasColumnName("bMachineDebridageSoft");
            entity.Property(e => e.BMachineEtalonnable)
                .HasDefaultValueSql("((0))")
                .HasComment("Machine etalonnable")
                .HasColumnName("bMachineEtalonnable");
            entity.Property(e => e.BMachineHorsService)
                .HasDefaultValueSql("((0))")
                .HasComment("Machine hors service")
                .HasColumnName("bMachineHorsService");
            entity.Property(e => e.BMachineRetrofit)
                .HasDefaultValueSql("((0))")
                .HasComment("Machine rétrofité")
                .HasColumnName("bMachineRetrofit");
            entity.Property(e => e.DateMachineCommande)
                .HasPrecision(0)
                .HasComment("Date de la commande de la machine")
                .HasColumnName("dateMachineCommande");
            entity.Property(e => e.DateMachineCtrlFinal)
                .HasPrecision(0)
                .HasComment("Date du contrôle final (mise à dispo machine)")
                .HasColumnName("dateMachineCtrlFinal");
            entity.Property(e => e.DateMachineDateMaxUseSoft)
                .HasPrecision(0)
                .HasComment("Date fin bridage logiciel")
                .HasColumnName("dateMachineDateMaxUseSoft");
            entity.Property(e => e.DateMachineFinGarantie)
                .HasPrecision(0)
                .HasComment("Fin de garantie")
                .HasColumnName("dateMachineFinGarantie");
            entity.Property(e => e.DateMachineLivDemande)
                .HasPrecision(0)
                .HasComment("Date de livraison demandée")
                .HasColumnName("dateMachineLivDemande");
            entity.Property(e => e.DateMachineLivProgramme)
                .HasPrecision(0)
                .HasComment("Date de livraison programmée")
                .HasColumnName("dateMachineLivProgramme");
            entity.Property(e => e.DateMachineLivraison)
                .HasPrecision(0)
                .HasComment("Date de livraison effective")
                .HasColumnName("dateMachineLivraison");
            entity.Property(e => e.DateMachineRetrofit)
                .HasPrecision(0)
                .HasComment("Date du dernier retrofit")
                .HasColumnName("dateMachineRetrofit");
            entity.Property(e => e.DateMachineRevueContrat)
                .HasPrecision(0)
                .HasComment("Date de la revue de contrat")
                .HasColumnName("dateMachineRevueContrat");
            entity.Property(e => e.LnkIdclient)
                .HasComment("ID du Client")
                .HasColumnName("lnkIDClient");
            entity.Property(e => e.MachineSuiviDossier)
                .HasMaxLength(50)
                .HasComment("Etat du dossier 'papier' bleu : Inexistant, en cours, etc.");
            entity.Property(e => e.MachineSuiviEtat)
                .HasMaxLength(50)
                .HasComment("Etat de la machine : prod, stock, livré, ...");
            entity.Property(e => e.MachineSuiviEtatSolde)
                .HasDefaultValueSql("((0))")
                .HasComment("Dossier machine (papier, st&c) soldé");
            entity.Property(e => e.MachineSuiviSldwks)
                .HasComment("Archivage SolidWorks")
                .HasColumnName("MachineSuiviSLDWKS");
            entity.Property(e => e.PeriodeCalibration).HasDefaultValueSql("((0))");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrCauseRetard)
                .HasComment("Causes liées aux retards de livraison")
                .HasColumnName("strCauseRetard");
            entity.Property(e => e.StrMachineClientName)
                .HasMaxLength(255)
                .HasComment("Nom client final")
                .HasColumnName("strMachineClientName");
            entity.Property(e => e.StrMachineCommentaire)
                .HasMaxLength(255)
                .HasComment("Commentaires divers (période de calibration, client relancé,...)")
                .HasColumnName("strMachineCommentaire");
            entity.Property(e => e.StrMachineConfigHwspec)
                .HasMaxLength(255)
                .HasComment("Options matérielles (non standards)")
                .HasColumnName("strMachineConfigHWSpec");
            entity.Property(e => e.StrMachineFournisseurName)
                .HasMaxLength(255)
                .HasComment("Nom du fournisseur de la machine")
                .HasColumnName("strMachineFournisseurName");
            entity.Property(e => e.StrMachineModele)
                .HasMaxLength(50)
                .HasComment("Type de la machine : DV-EVT-2100, ICM-D2P-....")
                .HasColumnName("strMachineModele");
            entity.Property(e => e.StrMachineModeleComplement)
                .HasMaxLength(100)
                .HasComment("Complément d'informations sur le type de la machine")
                .HasColumnName("strMachineModeleComplement");
            entity.Property(e => e.StrMachineOptionHw)
                .HasMaxLength(255)
                .HasComment("Options matérielles (standards)")
                .HasColumnName("strMachineOptionHW");
            entity.Property(e => e.StrMachineOptionSw)
                .HasMaxLength(255)
                .HasComment("Options logicielles actives")
                .HasColumnName("strMachineOptionSW");
            entity.Property(e => e.StrMachineSite)
                .HasMaxLength(255)
                .HasComment("Lieu d'installation de la machine sur le site client")
                .HasColumnName("strMachineSite");
            entity.Property(e => e.StrMachineSn)
                .HasMaxLength(255)
                .HasComment("N° de série machine")
                .HasColumnName("strMachineSN");
            entity.Property(e => e.StrMachineTransaction)
                .HasMaxLength(255)
                .HasComment("Machine vendue / démo / pret / location / etc...")
                .HasColumnName("strMachineTransaction");
            entity.Property(e => e.StrMachineWarning)
                .HasMaxLength(255)
                .HasComment("Remarques importantes sur la machine")
                .HasColumnName("strMachineWarning");

            entity.HasOne(d => d.LnkIdclientNavigation).WithMany(p => p.TblTcMachine)
                .HasForeignKey(d => d.LnkIdclient)
                .HasConstraintName("Tbl_TC_Machine$Tbl_TC_ClientTbl_TC_Machine");
        });

        modelBuilder.Entity<TblTcPeriodeCalibration>(entity =>
        {
            entity.HasKey(e => e.N).HasName("Tbl_TC_PeriodeCalibration$PrimaryKey");

            entity.ToTable("Tbl_TC_PeriodeCalibration");

            entity.Property(e => e.N).HasColumnName("N°");
            entity.Property(e => e.Champ1).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<TblTcProduit>(entity =>
        {
            entity.HasKey(e => e.Idproduit).HasName("Tbl_TC_Produit$PrimaryKey");

            entity.ToTable("Tbl_TC_Produit");

            entity.HasIndex(e => e.StrProdSn, "Tbl_TC_Produit$NumSerie");

            entity.HasIndex(e => e.LnkIdmachine, "Tbl_TC_Produit$lnkIDMachine");

            entity.HasIndex(e => e.LnkIdtypeProduit, "Tbl_TC_Produit$lnkIDTypeProduit");

            entity.Property(e => e.Idproduit).HasColumnName("IDProduit");
            entity.Property(e => e.BProdActif)
                .HasDefaultValueSql("((1))")
                .HasColumnName("bProdActif");
            entity.Property(e => e.DateProdLivraison)
                .HasPrecision(0)
                .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))")
                .HasColumnName("dateProdLivraison");
            entity.Property(e => e.LnkIdmachine).HasColumnName("lnkIDMachine");
            entity.Property(e => e.LnkIdtypeProduit).HasColumnName("lnkIDTypeProduit");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrProdAffectation)
                .HasMaxLength(255)
                .HasDefaultValueSql("('*')")
                .HasColumnName("strProdAffectation");
            entity.Property(e => e.StrProdCommentaire)
                .HasMaxLength(255)
                .HasDefaultValueSql("('*')")
                .HasColumnName("strProdCommentaire");
            entity.Property(e => e.StrProdMarque)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("('*')")
                .HasColumnName("strProdMarque");
            entity.Property(e => e.StrProdRevision)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("('*')")
                .HasColumnName("strProdRevision");
            entity.Property(e => e.StrProdSn)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("('*')")
                .HasColumnName("strProdSN");

            entity.HasOne(d => d.LnkIdmachineNavigation).WithMany(p => p.TblTcProduit)
                .HasForeignKey(d => d.LnkIdmachine)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Tbl_TC_Produit$Tbl_TC_MachineT_NumSerie");

            entity.HasOne(d => d.LnkIdtypeProduitNavigation).WithMany(p => p.TblTcProduit)
                .HasForeignKey(d => d.LnkIdtypeProduit)
                .HasConstraintName("Tbl_TC_Produit$T_ProduitsT_NumSerie");
        });

        modelBuilder.Entity<TblTcSsIntervertion>(entity =>
        {
            entity.HasKey(e => e.IdssIntervention).HasName("Tbl_TC_SsIntervertion$PrimaryKey");

            entity.ToTable("Tbl_TC_SsIntervertion");

            entity.HasIndex(e => e.DateSsIntervention, "Tbl_TC_SsIntervertion$dateSsIntervention");

            entity.HasIndex(e => e.LnkIdficheIntervention, "Tbl_TC_SsIntervertion$lnkIDFicheIntervention");

            entity.HasIndex(e => e.LnkIdintervenantAct, "Tbl_TC_SsIntervertion$lnkIDIntervenant_Act");

            entity.Property(e => e.IdssIntervention)
                .HasComment("ID de l'action")
                .HasColumnName("IDSsIntervention");
            entity.Property(e => e.BActionSoldee)
                .HasDefaultValueSql("((0))")
                .HasComment("Action soldé oui / non")
                .HasColumnName("bActionSoldee");
            entity.Property(e => e.DataSsInterventionEcheance)
                .HasPrecision(0)
                .HasComment("Echeance")
                .HasColumnName("dataSsInterventionEcheance");
            entity.Property(e => e.DateSsIntervention)
                .HasPrecision(0)
                .HasComment("Date de réalisation de l'action")
                .HasColumnName("dateSsIntervention");
            entity.Property(e => e.LSsInterventionTpasseMin)
                .HasDefaultValueSql("((0))")
                .HasComment("Temps passé lors de l'action")
                .HasColumnName("lSsInterventionTPasseMin");
            entity.Property(e => e.LnkIdficheIntervention)
                .HasDefaultValueSql("((0))")
                .HasComment("ID de l'intervention auquelle est raccroché l'action")
                .HasColumnName("lnkIDFicheIntervention");
            entity.Property(e => e.LnkIdintervenantAct)
                .HasDefaultValueSql("((0))")
                .HasComment("Intervenant affecté à l'action")
                .HasColumnName("lnkIDIntervenant_Act");
            entity.Property(e => e.LnkIdtypeAction)
                .HasComment("Type prédéfini d'action")
                .HasColumnName("lnkIDTypeAction");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrSsInterventionAction)
                .HasComment("Descriptif ou complément d'informations sur l'action à apporter")
                .HasColumnName("strSsInterventionAction");
            entity.Property(e => e.StrSsInterventionCorrectif)
                .HasComment("Réponse apportée")
                .HasColumnName("strSsInterventionCorrectif");

            entity.HasOne(d => d.LnkIdficheInterventionNavigation).WithMany(p => p.TblTcSsIntervertion)
                .HasForeignKey(d => d.LnkIdficheIntervention)
                .HasConstraintName("Tbl_TC_SsIntervertion$Tbl_TC_FicheInterventionTbl_TC_SsIntervertion");

            entity.HasOne(d => d.LnkIdintervenantActNavigation).WithMany(p => p.TblTcSsIntervertion)
                .HasForeignKey(d => d.LnkIdintervenantAct)
                .HasConstraintName("Tbl_TC_SsIntervertion$Tbl_TC_IntervenantTbl_TC_SsIntervertion1");

            entity.HasOne(d => d.LnkIdtypeActionNavigation).WithMany(p => p.TblTcSsIntervertion)
                .HasForeignKey(d => d.LnkIdtypeAction)
                .HasConstraintName("Tbl_TC_SsIntervertion$Tbl_TC_TypeActionTbl_TC_SsIntervertion");
        });

        modelBuilder.Entity<TblTcTitre>(entity =>
        {
            entity.HasKey(e => e.Titre).HasName("Tbl_TC_Titre$PrimaryKey");

            entity.ToTable("Tbl_TC_Titre");

            entity.Property(e => e.Titre).HasMaxLength(10);
        });

        modelBuilder.Entity<TblTcTypeAction>(entity =>
        {
            entity.HasKey(e => e.IdtypeAction).HasName("Tbl_TC_TypeAction$PrimaryKey");

            entity.ToTable("Tbl_TC_TypeAction");

            entity.Property(e => e.IdtypeAction).HasColumnName("IDTypeAction");
            entity.Property(e => e.StrTypeActionDescription)
                .HasMaxLength(255)
                .HasColumnName("strTypeActionDescription");
        });

        modelBuilder.Entity<TblTcTypeContrat>(entity =>
        {
            entity.HasKey(e => e.IdtypeContrat).HasName("Tbl_TC_TypeContrat$PrimaryKey");

            entity.ToTable("Tbl_TC_TypeContrat");

            entity.Property(e => e.IdtypeContrat)
                .HasComment("Index")
                .HasColumnName("IDTypeContrat");
            entity.Property(e => e.BTypContratActif)
                .HasDefaultValueSql("((0))")
                .HasComment("Contrat actif oui/non")
                .HasColumnName("bTypContratActif");
            entity.Property(e => e.BTypContratFraisDep1CalibrageAn)
                .HasDefaultValueSql("((0))")
                .HasComment("Frais de déplacement pour le calibrage  intégré dans le prix du contrat")
                .HasColumnName("bTypContratFraisDep1CalibrageAn");
            entity.Property(e => e.BTypContratGarantie1CalibrageAn)
                .HasDefaultValueSql("((0))")
                .HasComment(" Visite annuelle AVEC CALIBRAGE une fois par an  (Avec déplacement en supplément)")
                .HasColumnName("bTypContratGarantie1CalibrageAn");
            entity.Property(e => e.BTypContratGarantie1VisiteAn)
                .HasDefaultValueSql("((0))")
                .HasComment(" Visite annuelle HORS CALIBRAGE une fois par an (Avec déplacement en supplément)")
                .HasColumnName("bTypContratGarantie1VisiteAn");
            entity.Property(e => e.BTypContratGarantieDep)
                .HasDefaultValueSql("((0))")
                .HasComment(" Intervention sur site sous 48H appel avant 12H00")
                .HasColumnName("bTypContratGarantieDep");
            entity.Property(e => e.BTypContratGarantieDepSupp)
                .HasDefaultValueSql("((0))")
                .HasComment(" Déplacement en supplément")
                .HasColumnName("bTypContratGarantieDepSupp");
            entity.Property(e => e.BTypContratGarantieExpPiece)
                .HasDefaultValueSql("((0))")
                .HasComment(" Envoi de pièces de rechange sous 48H appel avant 12H00")
                .HasColumnName("bTypContratGarantieExpPiece");
            entity.Property(e => e.BTypContratGarantieHotLine)
                .HasDefaultValueSql("((0))")
                .HasComment("Garantie Hot Line (limite de temps et du nombre d'appels)")
                .HasColumnName("bTypContratGarantieHotLine");
            entity.Property(e => e.BTypContratGarantieMo)
                .HasDefaultValueSql("((0))")
                .HasComment(" Main d'oeuvre gratuite")
                .HasColumnName("bTypContratGarantieMO");
            entity.Property(e => e.BTypContratGarantiePetitePiece)
                .HasDefaultValueSql("((0))")
                .HasComment(" Petite fourniture gratuite")
                .HasColumnName("bTypContratGarantiePetitePiece");
            entity.Property(e => e.BTypContratGarantieSoft)
                .HasDefaultValueSql("((0))")
                .HasComment(" Mise à jour logicielle gratuite  (Dans la limite des capacités du matériel)")
                .HasColumnName("bTypContratGarantieSoft");
            entity.Property(e => e.BTypContratGarantieToutePiece)
                .HasDefaultValueSql("((0))")
                .HasComment("Toutes pieces gratuites")
                .HasColumnName("bTypContratGarantieToutePiece");
            entity.Property(e => e.BTypContratRenouvelableAuto)
                .HasDefaultValueSql("((0))")
                .HasComment("Contrat renouvelable par tacite reconduction")
                .HasColumnName("bTypContratRenouvelableAuto");
            entity.Property(e => e.ITypContratOrder).HasColumnName("iTypContratOrder");
            entity.Property(e => e.NTypContratDelaiExpPiece).HasColumnName("nTypContratDelaiExpPiece");
            entity.Property(e => e.NTypContratDelaiInterv).HasColumnName("nTypContratDelaiInterv");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrTypContratComment)
                .HasMaxLength(255)
                .HasComment("Commentaire")
                .HasColumnName("strTypContratComment");
            entity.Property(e => e.StrTypContratModelDefLong)
                .HasMaxLength(80)
                .HasComment("Definition du modèle de contrat texte long")
                .HasColumnName("strTypContratModelDefLong");
            entity.Property(e => e.StrTypContratModelDefShort)
                .HasMaxLength(8)
                .HasComment("Definition du modèle de contrat texte court")
                .HasColumnName("strTypContratModelDefShort");
            entity.Property(e => e.StrTypContratPays)
                .HasMaxLength(50)
                .HasColumnName("strTypContratPays");
        });

        modelBuilder.Entity<TblTcTypeFicheIntervention>(entity =>
        {
            entity.HasKey(e => e.IdtypeFicheIntervention).HasName("Tbl_TC_TypeFicheIntervention$PrimaryKey");

            entity.ToTable("Tbl_TC_TypeFicheIntervention");

            entity.HasIndex(e => e.IdtypeFicheIntervention, "Tbl_TC_TypeFicheIntervention$Item").IsUnique();

            entity.Property(e => e.IdtypeFicheIntervention)
                .ValueGeneratedNever()
                .HasColumnName("IDTypeFicheIntervention");
            entity.Property(e => e.StrTfiaide)
                .HasMaxLength(255)
                .HasColumnName("strTFIAide");
            entity.Property(e => e.StrTfitexteCourt)
                .HasMaxLength(25)
                .HasColumnName("strTFITexteCourt");
        });

        modelBuilder.Entity<TblTcTypeIntervention>(entity =>
        {
            entity.HasKey(e => e.IdtypeIntervention).HasName("Tbl_TC_TypeIntervention$PrimaryKey");

            entity.ToTable("Tbl_TC_TypeIntervention");

            entity.Property(e => e.IdtypeIntervention).HasColumnName("IDTypeIntervention");
            entity.Property(e => e.StrTypeInterventionDescription)
                .HasMaxLength(255)
                .HasColumnName("strTypeInterventionDescription");
        });

        modelBuilder.Entity<TblTcTypeLogiciel>(entity =>
        {
            entity.HasKey(e => e.IdtypeLogiciel).HasName("Tbl_TC_TypeLogiciel$PrimaryKey");

            entity.ToTable("Tbl_TC_TypeLogiciel");

            entity.HasIndex(e => e.Categorie, "Tbl_TC_TypeLogiciel$Categorie");

            entity.HasIndex(e => e.Designation, "Tbl_TC_TypeLogiciel$Designation").IsUnique();

            entity.HasIndex(e => e.IdtypeLogiciel, "Tbl_TC_TypeLogiciel$Item").IsUnique();

            entity.HasIndex(e => e.Ordre, "Tbl_TC_TypeLogiciel$Ordre").IsUnique();

            entity.Property(e => e.IdtypeLogiciel).HasColumnName("IDTypeLogiciel");
            entity.Property(e => e.Categorie).HasMaxLength(10);
            entity.Property(e => e.Designation).HasMaxLength(30);
            entity.Property(e => e.Obsolete).HasDefaultValueSql("((0))");
            entity.Property(e => e.Ordre).HasDefaultValueSql("((0))");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
        });

        modelBuilder.Entity<TblTcTypeProduit>(entity =>
        {
            entity.HasKey(e => e.IdtypeProduit).HasName("Tbl_TC_TypeProduit$PrimaryKey");

            entity.ToTable("Tbl_TC_TypeProduit");

            entity.HasIndex(e => e.StrTypProdCodeArticle, "Tbl_TC_TypeProduit$Categorie");

            entity.HasIndex(e => e.StrTypProdDesignation, "Tbl_TC_TypeProduit$Designation").IsUnique();

            entity.HasIndex(e => e.NTypProdOrdre, "Tbl_TC_TypeProduit$Ordre");

            entity.HasIndex(e => e.BTypProdObsolete, "Tbl_TC_TypeProduit$bTypProdObsolete");

            entity.HasIndex(e => new { e.NTypProdOrdre, e.StrTypProdCodeArticle }, "Tbl_TC_TypeProduit$nTypProdOrdrestrTypProdCategorie");

            entity.HasIndex(e => new { e.StrTypProdCodeArticle, e.NTypProdOrdre }, "Tbl_TC_TypeProduit$strTypProdCategorienTypProdOrdre");

            entity.Property(e => e.IdtypeProduit).HasColumnName("IDTypeProduit");
            entity.Property(e => e.BTypProdObsolete)
                .HasDefaultValueSql("((0))")
                .HasColumnName("bTypProdObsolete");
            entity.Property(e => e.NTypProdOrdre).HasColumnName("nTypProdOrdre");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.StrTypProdCodeArticle)
                .HasMaxLength(50)
                .HasColumnName("strTypProdCodeArticle");
            entity.Property(e => e.StrTypProdDesignation)
                .HasMaxLength(50)
                .HasColumnName("strTypProdDesignation");
        });

        modelBuilder.Entity<UsysApplicationLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("USysApplicationLog$PrimaryKey");

            entity.ToTable("USysApplicationLog");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Category).HasMaxLength(255);
            entity.Property(e => e.Context).HasMaxLength(255);
            entity.Property(e => e.Created).HasPrecision(0);
            entity.Property(e => e.DataMacroInstanceId)
                .HasMaxLength(255)
                .HasColumnName("Data Macro Instance ID");
            entity.Property(e => e.ErrorNumber).HasColumnName("Error Number");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(255)
                .HasColumnName("Object Type");
            entity.Property(e => e.SourceObject).HasMaxLength(255);
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}